// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebsocketMessage

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CreateMessageResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsCreateMessageResponse(buf []byte, offset flatbuffers.UOffsetT) *CreateMessageResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CreateMessageResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishCreateMessageResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCreateMessageResponse(buf []byte, offset flatbuffers.UOffsetT) *CreateMessageResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CreateMessageResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCreateMessageResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CreateMessageResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CreateMessageResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CreateMessageResponse) ChatId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CreateMessageResponse) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CreateMessageResponse) UserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CreateMessageResponse) CreatedAtMicro() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CreateMessageResponse) MutateCreatedAtMicro(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CreateMessageResponse) MsgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CreateMessageResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CreateMessageResponseAddChatId(builder *flatbuffers.Builder, chatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(chatId), 0)
}
func CreateMessageResponseAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(text), 0)
}
func CreateMessageResponseAddUserId(builder *flatbuffers.Builder, userId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(userId), 0)
}
func CreateMessageResponseAddCreatedAtMicro(builder *flatbuffers.Builder, createdAtMicro int64) {
	builder.PrependInt64Slot(3, createdAtMicro, 0)
}
func CreateMessageResponseAddMsgId(builder *flatbuffers.Builder, msgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(msgId), 0)
}
func CreateMessageResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
