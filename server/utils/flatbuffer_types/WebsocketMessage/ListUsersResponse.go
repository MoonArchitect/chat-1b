// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebsocketMessage

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ListUsersResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsListUsersResponse(buf []byte, offset flatbuffers.UOffsetT) *ListUsersResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ListUsersResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishListUsersResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsListUsersResponse(buf []byte, offset flatbuffers.UOffsetT) *ListUsersResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ListUsersResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedListUsersResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ListUsersResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ListUsersResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ListUsersResponse) Users(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ListUsersResponse) UsersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ListUsersResponse) ChatId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ListUsersResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ListUsersResponseAddUsers(builder *flatbuffers.Builder, users flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(users), 0)
}
func ListUsersResponseStartUsersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ListUsersResponseAddChatId(builder *flatbuffers.Builder, chatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(chatId), 0)
}
func ListUsersResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
