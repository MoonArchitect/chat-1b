// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebsocketMessage

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChatListNotification struct {
	_tab flatbuffers.Table
}

func GetRootAsChatListNotification(buf []byte, offset flatbuffers.UOffsetT) *ChatListNotification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChatListNotification{}
	x.Init(buf, n+offset)
	return x
}

func FinishChatListNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsChatListNotification(buf []byte, offset flatbuffers.UOffsetT) *ChatListNotification {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ChatListNotification{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedChatListNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ChatListNotification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChatListNotification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ChatListNotification) ChatId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChatListNotification) UserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChatListNotification) LastActivity() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChatListNotification) MutateLastActivity(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func ChatListNotificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ChatListNotificationAddChatId(builder *flatbuffers.Builder, chatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(chatId), 0)
}
func ChatListNotificationAddUserId(builder *flatbuffers.Builder, userId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(userId), 0)
}
func ChatListNotificationAddLastActivity(builder *flatbuffers.Builder, lastActivity int64) {
	builder.PrependInt64Slot(2, lastActivity, 0)
}
func ChatListNotificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
