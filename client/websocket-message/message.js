// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = window.flatbuffers
import { Opcode } from '../websocket-message/opcode.js';
import { Payload } from '../websocket-message/payload.js';
export class Message {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMessage(bb, obj) {
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMessage(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    opcode() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Opcode.LIST_CHATS_RESPONSE;
    }
    payloadType() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : Payload.NONE;
    }
    payload(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    static startMessage(builder) {
        builder.startObject(3);
    }
    static addOpcode(builder, opcode) {
        builder.addFieldInt8(0, opcode, Opcode.LIST_CHATS_RESPONSE);
    }
    static addPayloadType(builder, payloadType) {
        builder.addFieldInt8(1, payloadType, Payload.NONE);
    }
    static addPayload(builder, payloadOffset) {
        builder.addFieldOffset(2, payloadOffset, 0);
    }
    static endMessage(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishMessageBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedMessageBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createMessage(builder, opcode, payloadType, payloadOffset) {
        Message.startMessage(builder);
        Message.addOpcode(builder, opcode);
        Message.addPayloadType(builder, payloadType);
        Message.addPayload(builder, payloadOffset);
        return Message.endMessage(builder);
    }
}
