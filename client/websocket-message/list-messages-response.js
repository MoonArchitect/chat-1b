// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = window.flatbuffers
import { MessageDB } from '../websocket-message/message-db.js';
export class ListMessagesResponse {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsListMessagesResponse(bb, obj) {
        return (obj || new ListMessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsListMessagesResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ListMessagesResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    chatId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    messages(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new MessageDB()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    messagesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startListMessagesResponse(builder) {
        builder.startObject(2);
    }
    static addChatId(builder, chatIdOffset) {
        builder.addFieldOffset(0, chatIdOffset, 0);
    }
    static addMessages(builder, messagesOffset) {
        builder.addFieldOffset(1, messagesOffset, 0);
    }
    static createMessagesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMessagesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endListMessagesResponse(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createListMessagesResponse(builder, chatIdOffset, messagesOffset) {
        ListMessagesResponse.startListMessagesResponse(builder);
        ListMessagesResponse.addChatId(builder, chatIdOffset);
        ListMessagesResponse.addMessages(builder, messagesOffset);
        return ListMessagesResponse.endListMessagesResponse(builder);
    }
}
