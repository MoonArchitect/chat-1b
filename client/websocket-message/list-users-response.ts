// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

const flatbuffers = window.flatbuffers

export class ListUsersResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ListUsersResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsListUsersResponse(bb:flatbuffers.ByteBuffer, obj?:ListUsersResponse):ListUsersResponse {
  return (obj || new ListUsersResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsListUsersResponse(bb:flatbuffers.ByteBuffer, obj?:ListUsersResponse):ListUsersResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ListUsersResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

users(index: number):string
users(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
users(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

usersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

chatId():string|null
chatId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chatId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startListUsersResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUsers(builder:flatbuffers.Builder, usersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, usersOffset, 0);
}

static createUsersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUsersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChatId(builder:flatbuffers.Builder, chatIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, chatIdOffset, 0);
}

static endListUsersResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createListUsersResponse(builder:flatbuffers.Builder, usersOffset:flatbuffers.Offset, chatIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  ListUsersResponse.startListUsersResponse(builder);
  ListUsersResponse.addUsers(builder, usersOffset);
  ListUsersResponse.addChatId(builder, chatIdOffset);
  return ListUsersResponse.endListUsersResponse(builder);
}
}
